{% load projects_tags %}


###########################################################################
#          auto-created docs italia specific configuration                #
###########################################################################


#
# The following code was added during an automated build on docs italia
# It is auto created and injected for every build. The result is based on the
# conf.py.tmpl file found in the docs italia codebase:
# https://github.com/italia/docs.italia.it/blob/master/readthedocs/templates/doc_builder/conf.py.tmpl
#


import sys
import os.path
import yaml
import docs_italia_theme
import recommonmark
from six import string_types
from sphinx import version_info
from recommonmark.parser import CommonMarkParser
from recommonmark.transform import AutoStructify


# Get suffix for proper linking to GitHub
# This is deprecated in Sphinx 1.3+,
# as each page can have its own suffix
if globals().get('source_suffix', False):
    if isinstance(source_suffix, string_types):
        SUFFIX = source_suffix
    else:
        SUFFIX = source_suffix[0]
else:
    SUFFIX = '.rst'

# Support markdown
def setup(app):
    try:
        if '.md' not in source_parsers:
            app.add_source_parser('.md', CommonMarkParser)
            app.add_config_value('recommonmark_config', {
                    'enable_eval_rst': True
                }, True)
            app.add_transform(AutoStructify)
    except Exception:
        # md is already registered or not configured no further actions required
        pass

exclude_patterns = ['readme.md', 'README.md', 'license.md', 'LICENSE.md', 'authors.md', 'AUTHORS.md']

# Add RTD Static Path. Add to the end because it overwrites previous files.
if not 'html_static_path' in globals():
    html_static_path = []
if os.path.exists('_static'):
    html_static_path.append('_static')
#html_static_path.append('{{ static_path }}')

# Setting the theme to docs_italia_theme
html_theme = 'docs_italia_theme'
html_style = None
html_theme_options = {}
html_theme_path = [docs_italia_theme.get_html_theme_path()]

# docs_italia_theme default options
source_suffix = SUFFIX
{% autoescape off %}
html_title = u"""{{ project.name }}"""
{% endautoescape %}
html_use_index = False
numfig = True
latex_documents = [
  (
    'index',
    '{{ project.slug }}.tex',
    {% autoescape off %}
    u"""{{ project.name }}""",
    u"""{{ publisher.name }}""",
    {% endautoescape %}
    'manual'
  ),
]
latex_show_urls = 'footnote'
latex_show_pagerefs = True

if globals().get('websupport2_base_url', False):
    websupport2_base_url = '{{ api_host }}/websupport'
    if 'http' not in settings.MEDIA_URL:
        websupport2_static_url = '{{ settings.STATIC_URL }}'
    else:
        websupport2_static_url = '{{ settings.MEDIA_URL }}/static'


#Add project information to the template context.
context = {
    'using_theme': False,
    'html_theme': html_theme,
    'current_version': "{{ version.verbose_name }}",
    'version_slug': "{{ version.slug }}",
    'MEDIA_URL': "{{ settings.MEDIA_URL }}",
    'PRODUCTION_DOMAIN': "{{ settings.PRODUCTION_DOMAIN }}",
    'versions': [{% for version in versions %}
    ("{{ version.slug }}", "/{{ publisher.slug }}/{{ publisher_project.slug }}/{{ project.slug }}/{{ version.project.language }}/{{ version.slug}}/"),{% endfor %}
    ],
    'downloads': [ {% for key, val in downloads.items %}
    ("{{ key }}", "{{ val }}"),{% endfor %}
    ],
    'subprojects': [ {% for slug, url in project.get_subproject_urls %}
        ("{{ slug }}", "{{ url }}"),{% endfor %}
    ],
    'tags': [{% for tag in tags %}
    (u"{{ tag }}", "/ricerca/tag/{{ tag }}/"),{% endfor %}
    ],
    'slug': '{{ project.slug }}',
    'name': u'{{ project.name }}',
    'publisher_project': u'{{ publisher_project.name }}',
    'publisher_project_slug': '{{ publisher_project.slug }}',
    'publisher': u'{{ publisher.name }}',
    'publisher_slug': '{{ publisher.slug }}',
    'publisher_logo': '{{ publisher_logo }}',
    'rtd_language': u'{{ project.language }}',
    'programming_language': u'{{ project.programming_language }}',
    'canonical_url': '{{ project.get_canonical_url }}',
    'analytics_code': '{{ project.analytics_code }}',
    'single_version': {{ project.single_version }},
    'conf_py_path': '{{ conf_py_path }}',
    'api_host': '{{ api_host }}',
    'github_user': '{{ github_user }}',
    'github_repo': '{{ github_repo }}',
    'github_version': '{{ github_version }}',
    'display_github': {{ display_github }},
    'bitbucket_user': '{{ bitbucket_user }}',
    'bitbucket_repo': '{{ bitbucket_repo }}',
    'bitbucket_version': '{{ bitbucket_version }}',
    'display_bitbucket': {{ display_bitbucket }},
    'gitlab_user': '{{ gitlab_user }}',
    'gitlab_repo': '{{ gitlab_repo }}',
    'gitlab_version': '{{ gitlab_version }}',
    'display_gitlab': {{ display_gitlab }},
    'READTHEDOCS': True,
    'using_theme': (html_theme == "default"),
    'new_theme': (html_theme == "sphinx_rtd_theme"),
    'source_suffix': SUFFIX,
    'user_analytics_code': '{{ project.analytics_code|default_if_none:'' }}',
    'global_analytics_code': '{{ settings.GLOBAL_ANALYTICS_CODE }}',
    {% if project.repo_type == 'git' %}
    'commit': '{{ commit|slice:"8" }}',
    {% else %}
    'commit': '{{ commit }}',
    {% endif %}
}

context['subproject_data'] = [
    {% for subproject in subprojects %}
    {
        'id': {{ subproject.id }},
        'name': '{{ subproject.name }}',
        'slug': '{{ subproject.slug }}',
        'url': '{{ subproject.canonical_url }}',
        'description': '{{ subproject.description }}',
        'version': '{{ subproject.default_version }}',
    },
    {% endfor %}
]
{% comment %}
We remove the try except if the document_settings.yml file is not
found so that we have a more understandable exception during the build process.
{% endcomment %}
document_settings_path = os.path.join('{{ version.get_build_path }}', 'document_settings.yml')
with open(document_settings_path) as rtd:
    data = rtd.read()
    data = yaml.safe_load(data)
context['docsitalia_data'] = data

if 'html_context' in globals():
    html_context.update(context)
else:
    html_context = context

# Add custom RTD extension
if 'extensions' in globals():
    extensions.append("readthedocs_ext.readthedocs")
    extensions.append("docs_italia_theme")
else:
    extensions = ["readthedocs_ext.readthedocs", "docs_italia_theme"]

today = '{{ today }}'
